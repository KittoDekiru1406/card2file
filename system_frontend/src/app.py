import streamlit as st
import requests
from PIL import Image
import io
import os
import json
from streamlit_webrtc import webrtc_streamer
import cv2
import numpy as np
from fpdf import FPDF

CARD2FILE_URL = os.getenv("CARD2FILE_URL", "http://localhost:8000/api/ocr")

def main():
    # Thi·∫øt l·∫≠p trang
    st.set_page_config(
        page_title="OCR CƒÉn C∆∞·ªõc C√¥ng D√¢n",
        page_icon="ü™™",
        layout="wide"
    )
    
    st.title("ü™™ Tr√≠ch xu·∫•t th√¥ng tin CƒÉn C∆∞·ªõc C√¥ng D√¢n")
    st.markdown("### T·∫£i l√™n ho·∫∑c ch·ª•p ·∫£nh cƒÉn c∆∞·ªõc c√¥ng d√¢n ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("1Ô∏è‚É£ Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh")
        input_method = st.radio(
            "Ch·ªçn c√°ch th·ª©c:",
            ("T·∫£i ·∫£nh l√™n", "Ch·ª•p ·∫£nh")
        )
        
        if input_method == "T·∫£i ·∫£nh l√™n":
            uploaded_file = st.file_uploader(
                "Ch·ªçn ·∫£nh cƒÉn c∆∞·ªõc c√¥ng d√¢n",
                type=['png', 'jpg', 'jpeg']
            )
            
            if uploaded_file is not None:
                image = Image.open(uploaded_file)
                st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)
                
                if st.button("Tr√≠ch xu·∫•t th√¥ng tin"):
                    try:
                        img_byte_arr = io.BytesIO()
                        image.save(img_byte_arr, format=image.format)
                        img_byte_arr = img_byte_arr.getvalue()
                        
                        response = requests.post(
                            CARD2FILE_URL,
                            files={"file": ("file", img_byte_arr, "image/jpeg")},
                            data={"filename": uploaded_file.name} 
                        )
                        
                        if response.status_code == 200:
                            data = response.json()
                            display_results(data, col2)
                        else:
                            st.error(f"L·ªói API: {response.json().get('detail')}")
                    
                    except Exception as e:
                        st.error(f"L·ªói: {str(e)}")
        
        elif input_method == "Ch·ª•p ·∫£nh":
            st.write("üì∏ Camera")
            webrtc_ctx = webrtc_streamer(key="camera")
            
            if st.button("Ch·ª•p ·∫£nh"):
                if webrtc_ctx and webrtc_ctx.video_transformer:
                    frame = webrtc_ctx.video_transformer.frame
                    if frame is not None:
                        img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                        st.image(img, caption="·∫¢nh ƒë√£ ch·ª•p", use_container_width=True)
                        
                        img_byte_arr = io.BytesIO()
                        img.save(img_byte_arr, format='JPEG')
                        img_byte_arr = img_byte_arr.getvalue()
                        
                        try:
                            response = requests.post(
                                CARD2FILE_URL,
                                files={"file": ("file", img_byte_arr, "image/jpeg")},
                                data={"filename": uploaded_file.name} 
                            )
                            
                            if response.status_code == 200:
                                data = response.json()
                                display_results(data, col2)
                            else:
                                st.error(f"L·ªói API: {response.json().get('detail')}")
                        
                        except Exception as e:
                            st.error(f"L·ªói: {str(e)}")


def display_results(data, col):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ key-value v√† l∆∞u ra t·ªáp PDF"""
    with col:
        st.subheader("2Ô∏è‚É£ K·∫øt qu·∫£ tr√≠ch xu·∫•t")
        print(f'Data: {data}')
        # Hi·ªÉn th·ªã key-value theo t·ª´ng d√≤ng
        data = data['results']

        for key, value in data.items():
            st.markdown(f"**{key}:** {value}")
        
        # Th√™m n√∫t xu·∫•t k·∫øt qu·∫£ ra PDF
        if st.button("üì• L∆∞u k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng PDF"):
            try:
                # T·∫°o PDF
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", size=12)
                pdf.cell(200, 10, txt="K·∫øt qu·∫£ tr√≠ch xu·∫•t cƒÉn c∆∞·ªõc c√¥ng d√¢n", ln=True, align='C')

                for key, value in data.items():
                    pdf.cell(0, 10, txt=f"{key}: {value}", ln=True)

                # L∆∞u PDF v√†o BytesIO
                pdf_output = io.BytesIO()
                pdf.output(pdf_output)
                pdf_output.seek(0)  # ƒê·∫£m b·∫£o con tr·ªè ·ªü ƒë·∫ßu stream

                # T·∫°o n√∫t t·∫£i xu·ªëng PDF
                st.download_button(
                    label="üì• T·∫£i xu·ªëng PDF",
                    data=pdf_output,
                    file_name="cccd_data.pdf",
                    mime="application/pdf"
                )

            except Exception as e:
                st.error(f"L·ªói khi t·∫°o PDF: {str(e)}")


if __name__ == "__main__":
    main()